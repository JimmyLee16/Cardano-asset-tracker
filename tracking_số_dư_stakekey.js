//script vi·∫øt v√† tri·ªÉn khai qua google app script

var spreadsheetId = "google sheet id c·ªßa b·∫°n";
var lastUpdateTimestamp = 0;
var totalBalance ;
var recipientEmail = email c·ªßa b·∫°n"
var check = "https://adastat.net/accounts/....." // l·∫•y ƒë∆∞·ªùng link trong web ƒë·ªÉ copy v√†o ƒë√¢y.
var currentTime = getCurrentTime();
var telegramBotToken = "Bot token c·ªßa b·∫°n";
var telegramChatId ="ID telegram group"; //add group v·ªõi bot 
function soduADA() {
  // Define the recipient email
  var koiosUrl = "https://api.koios.rest/api/v1/account_info";
  var koiosHeaders = {
    "Accept": "application/json",
    "Content-Type": "application/json",
    "authorization": "Author token" 
  };

  // Define the Koios API request body
  var koiosBody = {
    "_stake_addresses": ["ƒë·ªãa ch·ªâ stake key c·ªßa b·∫°n"]
  };

  // Make the HTTP request to Koios API
  var koiosResponse = UrlFetchApp.fetch(koiosUrl, {
    method: "post",
    contentType: "application/json",
    headers: koiosHeaders,
    payload: JSON.stringify(koiosBody)
  });

  // Parse the JSON response from Koios API
  var responseData = JSON.parse(koiosResponse.getContentText());
  var stakeInfo = responseData[0];

  // Extract relevant information from Koios API response
   totalBalance = Math.round(parseFloat(stakeInfo.total_balance) * 1e-6);
  var rewards = Math.round(parseFloat(stakeInfo.rewards) * 1e-6);
  var withdrawals = Math.round(parseFloat(stakeInfo.withdrawals) * 1e-6);
  var rewardsAvailable = Math.round(parseFloat(stakeInfo.rewards_available) * 1e-6);
  var emoji = "\uD83D\uDE04"; // Emoticon 'üòÑ'
  var poolid = stakeInfo.delegated_pool;

    // Logger.log gi√° tr·ªã c·ªßa totalbalance
    

    // Th√™m d·ªØ li·ªáu v√†o Google Sheet
    appendDataToSheet(totalBalance);

   
  }
  

function appendDataToSheet(totalBalance) {
  // L·∫•y ra b·∫£ng t√≠nh d·ª±a tr√™n ID
  var spreadsheet = SpreadsheetApp.openById(spreadsheetId);

  // Ch·ªçn sheet (n·∫øu c√≥ nhi·ªÅu sheet)
  var sheet = spreadsheet.getSheetByName("Tonghop"); // Thay "Sheet1" b·∫±ng t√™n c·ªßa sheet trong b·∫£ng t√≠nh c·ªßa b·∫°n

  // T·∫°o m·ªôt m·∫£ng d·ªØ li·ªáu ƒë·ªÉ th√™m v√†o sheet
  var data = [new Date(), totalBalance]; // Assuming you want to append the date and totalbalance

  // Th√™m m·∫£ng d·ªØ li·ªáu v√†o sheet
  sheet.appendRow(data);

  console.log("Data appended to the sheet:", data);
}
function getDataFromSheet() {
  try {
    var spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    var sheet = spreadsheet.getSheetByName("sheetname do b·∫°n t·∫°o trong googlesheet");

    // Check if the sheet exists
    if (!sheet) {
      console.error(" 'sheetname' not found in the spreadsheet.");
      return null;
    }

    // Check if there is data in the sheet
    var lastRow = sheet.getLastRow();
    if (lastRow < 2) {
      console.error("No data found in the sheet.");
      return null;
    }

    // L·∫•y d·ªØ li·ªáu t·ª´ c·ªôt B (Gi·∫£ ƒë·ªãnh totalbalance l√† c·ªôt B, ch·ªânh l·∫°i n·∫øu c·∫ßn thi·∫øt theo √Ω th√≠ch)
    var data = sheet.getRange(1, 2, sheet.getLastRow(), 1).getValues();
    return data;
  } catch (error) {
    console.error("Error accessing the spreadsheet:", error);
    return null;
  }
}

function compareAndPrintResults() {

  var sheetName = "t√™n sheetname";
  var check = "https://adastat.net/accounts/..."
  var sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName(sheetName);
  var data = sheet.getDataRange().getValues();

  var message = ""; // Initialize an empty message

  // Get the values for the latest row
  var latestRow = data.length;
  var currentValue = data[latestRow - 1][1]; // Assuming values are in column B

  // Compare with the previous row
  if (latestRow > 1) {
    var previousValue = data[latestRow - 2][1];
    var result = currentValue - previousValue;
        // Store the result in column C of the latest row
      sheet.getRange("C" + latestRow).setValue(result);

    if (result >0) { // Append to the message
      message += "\n" ;
      message += "<b> V√≠ c·ªßa b·∫°n v·ª´a tƒÉng th√™m " + result + " ADA  </b>\n";
      message += "\n" ;
      message += "<b> T·ªïng s·ªë d∆∞ hi·ªán t·∫°i l√† " + currentValue + "ADA </b>\n";
      message += " Ki·ªÉm tra giao d·ªãch ·ªü ƒë√¢y nh√©" + check + "\n";
      message += "Th·ªùi gian ki·ªÉm tra th·ª±c t·∫ø: " + currentTime + "\n";

      sendTelegramMessageToGroup(telegramBotToken, telegramChatId, message)
    } else if (result < 0) {
      message += "\n" ;
      message += "<b> V√≠ c·ªßa b·∫°n v·ª´a gi·∫£m ƒëi " + result + " ADA  </b>\n";
      message += "\n" ;
      message += "<b> T·ªïng s·ªë d∆∞ hi·ªán t·∫°i l√† " + currentValue + " ADA </b>\n";
      message += " Ki·ªÉm tra giao d·ªãch ·ªü ƒë√¢y nh√©" + check + "\n";
      message += "Th·ªùi gian ki·ªÉm tra th·ª±c t·∫ø: " + currentTime + "\n";
      sendTelegramMessageToGroup(telegramBotToken, telegramChatId, message)
    }
  }
  var emailSubject = "Th√¥ng tin s·∫øp";
if (message.trim() !== "") {
  MailApp.sendEmail({
    to: recipientEmail,
    subject: emailSubject,
    htmlBody: message
  });

  // Print the final message to the console
  console.log("Comparison completed:\n" + message);
} else {
  console.log("Message is empty. Not sending the email.");
}
}


function sendTelegramMessageToGroup(telegramBotToken, telegramChatId, message) {
  if (message.trim() !== "") {  // Check if the message is not empty or just whitespace
 

    var telegramApiUrl = "https://api.telegram.org/bot" + telegramBotToken + "/sendMessage";

    var payload = {
      "chat_id": telegramChatId,
      "text": message,
      "parse_mode": "HTML"
    };

    // Make the HTTP request to send the message
    var response = UrlFetchApp.fetch(telegramApiUrl, {
      "method": "post",
      "contentType": "application/json",
      "payload": JSON.stringify(payload)
    });

    // Log the response to check for errors
    console.log(response.getContentText());
  } else {
    console.log("Message is empty. Not sending to Telegram.");
  }
}

// L·∫•y d·ªØ li·ªáu t·ª´ sheet
var sheetData = getDataFromSheet();

// So s√°nh v√† g·ª≠i th√¥ng b√°o n·∫øu c√≥ thay ƒë·ªïi
compareAndPrintResults(sheetData);

function account_info(){

var url1 = 'https://api.koios.rest/api/v1/account_info';
var url2 = 'https://api.koios.rest/api/v1/account_assets';

var headers = {
  'Accept': 'application/json',
  'Content-Type': 'application/json'
};

var payload = {
  '_stake_addresses': ["stakekey c·ªßa b·∫°n"]
};

var options = {
  'method': 'post',
  'headers': headers,
  'payload': JSON.stringify(payload)
};

var responseurl1 = UrlFetchApp.fetch(url1, options);
var responseurl2 = UrlFetchApp.fetch(url2, options);

  // Chuy·ªÉn ƒë·ªïi ph·∫£n h·ªìi t·ª´ API sang ƒë·ªëi t∆∞·ª£ng JSON
var data1 = JSON.parse(responseurl1.getContentText())[0];
var data2 = JSON.parse(responseurl2.getContentText());
  // L·∫•y k·∫øt qu·∫£ stake_address t·ª´ ph·∫£n h·ªìi API
var adabal = Math.round(parseFloat(data1.total_balance) * 1e-6);
var asset_info = [];
for (var i = 0; i < data2.length; i++) {
  var assetName = data2[i].asset_name;
  var quantity = data2[i].quantity;
  var decimal = data2[i].decimals;

  // Chuy·ªÉn ƒë·ªïi assetName th√†nh chu·ªói ASCII
  var asciiAssetName = convertHexToASCII(assetName);

  // Th√™m v√†o m·∫£ng values ƒë·ªÉ sau ƒë√≥ ghi v√†o Google Sheets
  asset_info.push([asciiAssetName, quantity, decimal]);
}

  // L·ªçc v√† tr·∫£ k·∫øt qu·∫£ t·ª´ b·∫£ng "tonghop"
var spreadsheet1 = SpreadsheetApp.openById(spreadsheetId);

  // Ch·ªçn sheet (n·∫øu c√≥ nhi·ªÅu sheet)
var sheet1 = spreadsheet1.getSheetByName("live"); // Thay "Sheet1" b·∫±ng t√™n c·ªßa sheet trong b·∫£ng t√≠nh c·ªßa b·∫°n
sheet1.clear();
sheet1.getRange(1, 1).setValue("ADA");
sheet1.getRange(2, 1).setValue(adabal);

if (asset_info.length > 0) {
  // Ghi asset_name v√†o h√†ng ƒë·∫ßu ti√™n, b·∫Øt ƒë·∫ßu t·ª´ c·ªôt 2
  for (var i = 0; i < asset_info.length; i++) {
    sheet1.getRange(1, i + 2).setValue(asset_info[i][0]);
  }

  // Ghi quantity v√†o h√†ng th·ª© hai, b·∫Øt ƒë·∫ßu t·ª´ c·ªôt 2
  for (var i = 0; i < asset_info.length; i++) {
    sheet1.getRange(2, i + 2).setValue(asset_info[i][1]);
  }
  // Ghi decimals v√†o h√†ng th·ª© ba, b·∫Øt ƒë·∫ßu t·ª´ c·ªôt 2
  for (var i = 0; i < asset_info.length; i++) {
    sheet1.getRange(3, i + 2).setValue(asset_info[i][2]);
  }
  Logger.log(adabal);
} else {
  Logger.log("Kh√¥ng c√≥ d·ªØ li·ªáu asset_info ƒë·ªÉ ghi v√†o sheet.");
}
  var dataRange = sheet1.getDataRange();
  var values = dataRange.getValues();
  
  // Check if there is any data
  if (values.length > 1) {
    var message = "<b>Th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n</b>\n\n";
    var assetNameColumn = values[0];
    var quantityColumn = values[1];
    var decimalColumn = values[2];
    var message1 ="";
    // Iterate through each item in the column
    for (var i = 0; i < assetNameColumn.length; i++) {
      var assetName = assetNameColumn[i];
      var quantity = quantityColumn[i];
      var decimal = decimalColumn[i]
      if (decimal > 0) {
          quantity = quantity * Math.pow(10, -decimal);
        }

      // Append assetName and quantity to the message as a list item
      message1 += `-  ${assetName} : <b> ${quantity} </b>\n`;
    }
      message1 += `\nTh·ªùi gian ki·ªÉm tra th·ª±c t·∫ø: ` + currentTime + '\n';
      message1 += `C·∫£m ∆°n s·∫øp ƒë√£ lu√¥n ·ªßng h·ªô VIET pool\n `;
     
      
    
    var finalmess = message + message1;

    // Send the constructed message
    sendTelegramMessageToGroup(telegramBotToken, telegramChatId, finalmess);
    var emailSubject = "Th√¥ng tin s·∫øp";
    if (message.trim() !== "") {
    MailApp.sendEmail({
      to: recipientEmail,
      subject: emailSubject,
      htmlBody: finalmess
    });
    }
    }else {
    // Inform the user if there is no data
    send("Kh√¥ng c√≥ th√¥ng tin v·ªÅ v√≠.", telegramChatId);
  }

}

function convertHexToASCII(hexString) {
  try {
    // Convert hex to bytes
    var bytes = [];
    for (var i = 0; i < hexString.length; i += 2) {
      bytes.push(parseInt(hexString.substr(i, 2), 16));
    }

    // Create a blob from the bytes
    var blob = Utilities.newBlob(bytes);

    // Convert the blob to ASCII string
    var asciiString = blob.getDataAsString();

    Logger.log("Converted ASCII String: " + asciiString);
    return asciiString;
  } catch (error) {
    Logger.log("Error converting hex to ASCII: " + error);
    return null; // Return null if there's an error
  }
  }
function getCurrentTime() {
  var currentTime = new Date();
  var hours = currentTime.getHours();
  var minutes = currentTime.getMinutes();
  var seconds = currentTime.getSeconds();
  var day = currentTime.getDate();
  var month = currentTime.getMonth() + 1; // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0
  var year = currentTime.getFullYear();

  // ƒê·∫£m b·∫£o r·∫±ng c√°c gi√° tr·ªã nh·ªè h∆°n 10 ƒë∆∞·ª£c hi·ªÉn th·ªã v·ªõi hai ch·ªØ s·ªë
  if (hours < 10) {
    hours = '0' + hours;
  }
  if (minutes < 10) {
    minutes = '0' + minutes;
  }
  if (seconds < 10) {
    seconds = '0' + seconds;
  }
  if (day < 10) {
    day = '0' + day;
  }
  if (month < 10) {
    month = '0' + month;
  }

  // Tr·∫£ v·ªÅ chu·ªói bi·ªÉu di·ªÖn cho th·ªùi gian hi·ªán t·∫°i
  return hours + ':' + minutes + ':' + seconds + ' ' + day + '/' + month + '/' + year;
}
function appendDataToSheet(totalBalance) {
  // L·∫•y ra b·∫£ng t√≠nh d·ª±a tr√™n ID
  var spreadsheet = SpreadsheetApp.openById(spreadsheetId);

  // Ch·ªçn sheet (n·∫øu c√≥ nhi·ªÅu sheet)
  var sheet = spreadsheet.getSheetByName("Tonghop"); // Thay "Sheet1" b·∫±ng t√™n c·ªßa sheet trong b·∫£ng t√≠nh c·ªßa b·∫°n

  // T·∫°o m·ªôt m·∫£ng d·ªØ li·ªáu ƒë·ªÉ th√™m v√†o sheet
  var data = [new Date(), totalBalance]; // Assuming you want to append the date and totalbalance

  // Th√™m m·∫£ng d·ªØ li·ªáu v√†o sheet
  sheet.appendRow(data);

  console.log("Data appended to the sheet:", data);
}




